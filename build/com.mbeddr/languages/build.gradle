// :build:com.mbeddr.build
def script_build_mbeddr = new File(scriptsBasePath + "/com.mbeddr.build/" + "build.xml")

ant.taskdef(name: "makeTests",
        classname: "com.mbeddr.tools.ant.MakeTestsTask",
        classpath: file(rootProject.projectDir.absolutePath + "/tools/ant/tasks/TeamcityMakeTests.jar")
)

// Ant <junit> task support
repositories {
    mavenCentral()
}
configurations {
    junitAnt
    mpsArtifacts
}

ext.dependencyRepositories = [
        'https://projects.itemis.de/nexus/content/repositories/mbeddr',
        'https://projects.itemis.de/nexus/content/repositories/mbeddr_snapshots' ]

dependencies {
    junitAnt 'junit:junit:4.12'
    junitAnt('org.apache.ant:ant-junit:1.9.7') {
        transitive = false
    }
    junitAnt('org.apache.ant:ant-junit4:1.9.7') {
        transitive = false
    }
    mpsArtifacts "com.mbeddr:platform:$mbeddrBuildNumber"
}


task resolveMpsArtifacts() {
    doLast {
        copy {
            from {
                    configurations.mpsArtifacts.resolve().collect { zipTree(it) }
                 }
            into artifactsDir
        }
    }
}

//move spawner into mbeddr script
task build_spawner(type: BuildLanguages, dependsOn: [':build:com.mbeddr:platform:copy_allScripts', resolveMpsArtifacts]) {
    script scriptFile('com.mbeddr.build/spawner.xml')
}

task copy_spawner(type: Copy, dependsOn: build_spawner) {
    from "artifacts/spawner/"
    into "$mpsHomeDir/plugins"
}

ant.taskdef(name: 'junit', classname: 'org.apache.tools.ant.taskdefs.optional.junit.JUnitTask',
        classpath: configurations.junitAnt.asPath)
ant.taskdef(name: 'junitreport', classname: 'org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator',
        classpath: configurations.junitAnt.asPath)


task build_mbeddr(type: BuildLanguages, dependsOn: copy_spawner ) {
    script script_build_mbeddr
}

def script_test_mbeddrTutorial = new File(scriptsBasePath + "/com.mbeddr.tutorial/" + "build-tests.xml")
def script_test_mbeddrAnalysisTs = new File(scriptsBasePath + "/com.mbeddr.analyses/" + "build-ts-tests.xml")
def script_test_mbeddrAnalysisEx = new File(scriptsBasePath + "/com.mbeddr.analyses/" + "build-ex-tests.xml")
def script_test_mbeddrPerformance = new File(scriptsBasePath + "/com.mbeddr.core/" + "build-performance-tests.xml")
def script_test_mbeddrDebugger = new File(scriptsBasePath + "/com.mbeddr.debugger/" + "build-tests.xml")
def script_test_mbeddrCoreEx = new File(scriptsBasePath + "/com.mbeddr.core/" + "build-ex-tests.xml")
def script_test_mbeddrCoreExLibrary = new File(scriptsBasePath + "/com.mbeddr.core/" + "build-aLibrary.xml")
def script_test_mbeddrCoreTs = new File(scriptsBasePath + "/com.mbeddr.core/" + "build-ts-tests.xml")
def script_test_mbeddrCcTs = new File(scriptsBasePath + "/com.mbeddr.cc/" + "build-ts-tests.xml")
def script_test_mbeddrCcEx = new File(scriptsBasePath + "/com.mbeddr.cc/" + "build-ex-tests.xml")
def script_test_mbeddrExtTs = new File(scriptsBasePath + "/com.mbeddr.ext/" + "build-ts-tests.xml")
def script_test_mbeddrExtEx = new File(scriptsBasePath + "/com.mbeddr.ext/" + "build-ex-tests.xml")


def script_build_tutorialLanguages = new File(scriptsBasePath + "/com.mbeddr.tutorial/" + "build-languages.xml")
def script_build_tutorialSolutions = new File(scriptsBasePath + "/com.mbeddr.tutorial/" + "build-solutions.xml")

task build_tutorial_languages(type: BuildLanguages, dependsOn: build_mbeddr) {
    script script_build_tutorialLanguages
}

task build_tutorial_solutions(type: BuildLanguages, dependsOn: build_tutorial_languages) {
    script script_build_tutorialSolutions
}

task build_tutorial(dependsOn: build_tutorial_solutions) { }


task test_mbeddr_tutorial(type: TestLanguages, dependsOn: build_tutorial) {
    script script_test_mbeddrTutorial
}

task build_mbeddr_analysis_ex(type: BuildLanguages, dependsOn: build_mbeddr) {
    script script_test_mbeddrAnalysisEx
}

task test_mbeddr_performance(type: TestLanguages, dependsOn: build_mbeddr) {
    script script_test_mbeddrPerformance
}

task test_mbeddr_debugger(type: TestLanguages, dependsOn: build_mbeddr) {
    script script_test_mbeddrDebugger
}

task build_mbeddr_core_ex(type: BuildLanguages, dependsOn: build_mbeddr) {
    script script_test_mbeddrCoreEx
}

task build_mbeddr_core_ex_library(type: BuildLanguages, dependsOn: build_mbeddr) {
    script script_test_mbeddrCoreExLibrary
}

task test_mbeddr_core_ts(type: TestLanguages, dependsOn: build_mbeddr) {
    script script_test_mbeddrCoreTs
}

task test_mbeddr_core_ex_library << {
    ant.makeTests(workingDirectory: rootProject.projectDir.absolutePath + "/code/languages/com.mbeddr.core/tests/aLibrary/source_gen/aLibrary/lib")
}

task test_mbeddr_core_ex << {
    ant.makeTests(workingDirectory: rootProject.projectDir.absolutePath + "/code/languages/com.mbeddr.core")
}

task test_mbeddr_core(dependsOn: [test_mbeddr_core_ex, test_mbeddr_core_ts, test_mbeddr_core_ex_library]) {

}
test_mbeddr_core_ex_library.dependsOn build_mbeddr_core_ex
test_mbeddr_core_ex.dependsOn test_mbeddr_core_ex_library
test_mbeddr_core_ex_library.dependsOn build_mbeddr_core_ex_library

task test_mbeddr_cc_ex << {
    ant.makeTests(workingDirectory: rootProject.projectDir.absolutePath + "/code/languages/com.mbeddr.cc")
}

task build_mbeddr_cc_ex(type: RunMbeddrAntScript, dependsOn: build_mbeddr) {
    script script_test_mbeddrCcEx
    targets 'clean', 'generate'
}

task test_mbeddr_cc_ts(type: TestLanguages, dependsOn: build_mbeddr) {
    script script_test_mbeddrCcTs
}

task test_mbeddr_cc(dependsOn: [build_mbeddr_cc_ex, test_mbeddr_cc_ex, test_mbeddr_cc_ts]) {}

task build_mbeddr_ext_ex(type: BuildLanguages, dependsOn: build_mbeddr) {
    script script_test_mbeddrExtEx
}

task test_mbeddr_ext_ex << {
    ant.makeTests(workingDirectory: rootProject.projectDir.absolutePath + "/code/languages/com.mbeddr.ext")
}

task test_mbeddr_ext_ts(type: TestLanguages, dependsOn: build_mbeddr) {
    script script_test_mbeddrExtTs
}

task test_mbeddr_analysis_ts(type: TestLanguages, dependsOn: build_mbeddr) {
    script script_test_mbeddrAnalysisTs
}
task test_mbeddr_analysis_ex << {
    ant.makeTests(workingDirectory: rootProject.projectDir.absolutePath + "/code/languages/com.mbeddr.analyses")
}

task test_mbeddr_analysis(dependsOn: [test_mbeddr_analysis_ts, build_mbeddr_analysis_ex, test_mbeddr_analysis_ex]) { }


task test_mbeddr_ext(dependsOn: [build_mbeddr_ext_ex, test_mbeddr_ext_ex, test_mbeddr_ext_ts]) {}


task test_mbeddr(dependsOn: [test_mbeddr_debugger, test_mbeddr_core, test_mbeddr_performance, test_mbeddr_cc, test_mbeddr_ext]) {}

task publish_mbeddr(type: Zip, dependsOn: test_mbeddr) {
    archiveName 'com.mbeddr.zip'
    from artifactsDir
    include "mbeddr/**"
}

publishing {
    publications {
        mbeddr(MavenPublication) {
            groupId 'com.mbeddr'
            artifactId 'mbeddr'
            version mbeddrBuildNumber
            artifact(publish_mbeddr) {}
        }
    }
}

check.dependsOn test_mbeddr